/*******************************************************************************
*                          AUTOGENERATED BY REGBLOCK                           *
*                            Do not edit manually.                             *
*          Edit the source file (or regblock utility) and regenerate.          *
*******************************************************************************/

// Block name           : apb_burst
// Bus type             : apb
// Bus data width       : 32
// Bus address width    : 16

module apb_burst_regs (
	input wire clk,
	input wire rst_n,
	
	// APB Port
	input wire apbs_psel,
	input wire apbs_penable,
	input wire apbs_pwrite,
	input wire [15:0] apbs_paddr,
	input wire [31:0] apbs_pwdata,
	output wire [31:0] apbs_prdata,
	output wire apbs_pready,
	output wire apbs_pslverr,
	
	// Register interfaces
	input wire  csr_ready_i,
	output reg  csr_read_o,
	output reg  csr_write_o,
	output reg [31:0] addr_o,
	input wire [31:0] data0_i,
	output reg [31:0] data0_o,
	output reg data0_wen,
	output reg data0_ren,
	input wire [31:0] data1_i,
	output reg [31:0] data1_o,
	output reg data1_wen,
	output reg data1_ren,
	input wire [31:0] data2_i,
	output reg [31:0] data2_o,
	output reg data2_wen,
	output reg data2_ren,
	input wire [31:0] data3_i,
	output reg [31:0] data3_o,
	output reg data3_wen,
	output reg data3_ren
);

// APB adapter
wire [31:0] wdata = apbs_pwdata;
reg [31:0] rdata;
wire wen = apbs_psel && apbs_penable && apbs_pwrite;
wire ren = apbs_psel && apbs_penable && !apbs_pwrite;
wire [15:0] addr = apbs_paddr & 16'h1c;
assign apbs_prdata = rdata;
assign apbs_pready = 1'b1;
assign apbs_pslverr = 1'b0;

localparam ADDR_CSR = 0;
localparam ADDR_ADDR = 4;
localparam ADDR_DATA0 = 8;
localparam ADDR_DATA1 = 12;
localparam ADDR_DATA2 = 16;
localparam ADDR_DATA3 = 20;

wire __csr_wen = wen && addr == ADDR_CSR;
wire __csr_ren = ren && addr == ADDR_CSR;
wire __addr_wen = wen && addr == ADDR_ADDR;
wire __addr_ren = ren && addr == ADDR_ADDR;
wire __data0_wen = wen && addr == ADDR_DATA0;
wire __data0_ren = ren && addr == ADDR_DATA0;
wire __data1_wen = wen && addr == ADDR_DATA1;
wire __data1_ren = ren && addr == ADDR_DATA1;
wire __data2_wen = wen && addr == ADDR_DATA2;
wire __data2_ren = ren && addr == ADDR_DATA2;
wire __data3_wen = wen && addr == ADDR_DATA3;
wire __data3_ren = ren && addr == ADDR_DATA3;

wire  csr_ready_wdata = wdata[0];
wire  csr_ready_rdata;
wire  csr_read_wdata = wdata[1];
wire  csr_read_rdata;
wire  csr_write_wdata = wdata[2];
wire  csr_write_rdata;
wire [31:0] __csr_rdata = {29'h0, csr_write_rdata, csr_read_rdata, csr_ready_rdata};
assign csr_ready_rdata = csr_ready_i;
assign csr_read_rdata = 1'h0;
assign csr_write_rdata = 1'h0;

wire [31:0] addr_wdata = wdata[31:0];
wire [31:0] addr_rdata;
wire [31:0] __addr_rdata = {addr_rdata};
assign addr_rdata = addr_o;

wire [31:0] data0_wdata = wdata[31:0];
wire [31:0] data0_rdata;
wire [31:0] __data0_rdata = {data0_rdata};
assign data0_rdata = data0_i;

wire [31:0] data1_wdata = wdata[31:0];
wire [31:0] data1_rdata;
wire [31:0] __data1_rdata = {data1_rdata};
assign data1_rdata = data1_i;

wire [31:0] data2_wdata = wdata[31:0];
wire [31:0] data2_rdata;
wire [31:0] __data2_rdata = {data2_rdata};
assign data2_rdata = data2_i;

wire [31:0] data3_wdata = wdata[31:0];
wire [31:0] data3_rdata;
wire [31:0] __data3_rdata = {data3_rdata};
assign data3_rdata = data3_i;

always @ (*) begin
	case (addr)
		ADDR_CSR: rdata = __csr_rdata;
		ADDR_ADDR: rdata = __addr_rdata;
		ADDR_DATA0: rdata = __data0_rdata;
		ADDR_DATA1: rdata = __data1_rdata;
		ADDR_DATA2: rdata = __data2_rdata;
		ADDR_DATA3: rdata = __data3_rdata;
		default: rdata = 32'h0;
	endcase
	csr_read_o = csr_read_wdata & {1{__csr_wen}};
	csr_write_o = csr_write_wdata & {1{__csr_wen}};
	data0_wen = __data0_wen;
	data0_o = data0_wdata;
	data0_ren = __data0_ren;
	data1_wen = __data1_wen;
	data1_o = data1_wdata;
	data1_ren = __data1_ren;
	data2_wen = __data2_wen;
	data2_o = data2_wdata;
	data2_ren = __data2_ren;
	data3_wen = __data3_wen;
	data3_o = data3_wdata;
	data3_ren = __data3_ren;
end

always @ (posedge clk or negedge rst_n) begin
	if (!rst_n) begin
		addr_o <= 32'h0;
	end else begin
		if (__addr_wen)
			addr_o <= addr_wdata;
	end
end

endmodule
