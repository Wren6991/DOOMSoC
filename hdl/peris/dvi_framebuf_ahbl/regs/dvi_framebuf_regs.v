/*******************************************************************************
*                          AUTOGENERATED BY REGBLOCK                           *
*                            Do not edit manually.                             *
*          Edit the source file (or regblock utility) and regenerate.          *
*******************************************************************************/

// Block name           : dvi_framebuf
// Bus type             : apb
// Bus data width       : 32
// Bus address width    : 16

// Controls for displaying a RAM-resident framebuffer, or synchronously-swapped
// set of framebuffers, on a DVI link. The DVI display resolution is fixed, but
// this hardware supports doubling/quadrupling of framebuffer pixels to achieve
// lower resolution and lower video bandwidth than is required for full-
// resolution video.

module dvi_framebuf_regs (
	input wire clk,
	input wire rst_n,
	
	// APB Port
	input wire apbs_psel,
	input wire apbs_penable,
	input wire apbs_pwrite,
	input wire [15:0] apbs_paddr,
	input wire [31:0] apbs_pwdata,
	output wire [31:0] apbs_prdata,
	output wire apbs_pready,
	output wire apbs_pslverr,
	
	// Register interfaces
	output reg  csr_en_o,
	input wire  csr_virq_i,
	output reg  csr_virq_o,
	output reg  csr_virqe_o,
	output reg  csr_virq_pauses_dma_o,
	input wire  csr_underflow_i,
	output reg  csr_underflow_o,
	output reg [1:0] csr_log_pix_repeat_o,
	output reg [27:0] framebuf_o,
	input wire [15:0] dispsize_w_i,
	input wire [15:0] dispsize_h_i,
	output reg [23:0] palette_colour_o,
	output reg palette_colour_wen,
	output reg [7:0] palette_addr_o,
	output reg palette_addr_wen
);

// APB adapter
wire [31:0] wdata = apbs_pwdata;
reg [31:0] rdata;
wire wen = apbs_psel && apbs_penable && apbs_pwrite;
wire ren = apbs_psel && apbs_penable && !apbs_pwrite;
wire [15:0] addr = apbs_paddr & 16'hc;
assign apbs_prdata = rdata;
assign apbs_pready = 1'b1;
assign apbs_pslverr = 1'b0;

localparam ADDR_CSR = 0;
localparam ADDR_FRAMEBUF = 4;
localparam ADDR_DISPSIZE = 8;
localparam ADDR_PALETTE = 12;

wire __csr_wen = wen && addr == ADDR_CSR;
wire __csr_ren = ren && addr == ADDR_CSR;
wire __framebuf_wen = wen && addr == ADDR_FRAMEBUF;
wire __framebuf_ren = ren && addr == ADDR_FRAMEBUF;
wire __dispsize_wen = wen && addr == ADDR_DISPSIZE;
wire __dispsize_ren = ren && addr == ADDR_DISPSIZE;
wire __palette_wen = wen && addr == ADDR_PALETTE;
wire __palette_ren = ren && addr == ADDR_PALETTE;

wire  csr_en_wdata = wdata[0];
wire  csr_en_rdata;
wire  csr_virq_wdata = wdata[1];
wire  csr_virq_rdata;
wire  csr_virqe_wdata = wdata[2];
wire  csr_virqe_rdata;
wire  csr_virq_pauses_dma_wdata = wdata[3];
wire  csr_virq_pauses_dma_rdata;
wire  csr_underflow_wdata = wdata[8];
wire  csr_underflow_rdata;
wire [1:0] csr_log_pix_repeat_wdata = wdata[17:16];
wire [1:0] csr_log_pix_repeat_rdata;
wire [31:0] __csr_rdata = {14'h0, csr_log_pix_repeat_rdata, 7'h0, csr_underflow_rdata, 4'h0, csr_virq_pauses_dma_rdata, csr_virqe_rdata, csr_virq_rdata, csr_en_rdata};
assign csr_en_rdata = csr_en_o;
reg  csr_virq;
assign csr_virq_rdata = csr_virq;
assign csr_virqe_rdata = csr_virqe_o;
assign csr_virq_pauses_dma_rdata = csr_virq_pauses_dma_o;
reg  csr_underflow;
assign csr_underflow_rdata = csr_underflow;
assign csr_log_pix_repeat_rdata = csr_log_pix_repeat_o;

wire [27:0] framebuf_wdata = wdata[31:4];
wire [27:0] framebuf_rdata;
wire [31:0] __framebuf_rdata = {framebuf_rdata, 4'h0};
assign framebuf_rdata = framebuf_o;

wire [15:0] dispsize_w_wdata = wdata[15:0];
wire [15:0] dispsize_w_rdata;
wire [15:0] dispsize_h_wdata = wdata[31:16];
wire [15:0] dispsize_h_rdata;
wire [31:0] __dispsize_rdata = {dispsize_h_rdata, dispsize_w_rdata};
assign dispsize_w_rdata = dispsize_w_i;
assign dispsize_h_rdata = dispsize_h_i;

wire [23:0] palette_colour_wdata = wdata[23:0];
wire [23:0] palette_colour_rdata;
wire [7:0] palette_addr_wdata = wdata[31:24];
wire [7:0] palette_addr_rdata;
wire [31:0] __palette_rdata = {palette_addr_rdata, palette_colour_rdata};
assign palette_colour_rdata = 24'h0;
assign palette_addr_rdata = 8'h0;

always @ (*) begin
	case (addr)
		ADDR_CSR: rdata = __csr_rdata;
		ADDR_FRAMEBUF: rdata = __framebuf_rdata;
		ADDR_DISPSIZE: rdata = __dispsize_rdata;
		ADDR_PALETTE: rdata = __palette_rdata;
		default: rdata = 32'h0;
	endcase
	csr_virq_o = csr_virq;
	csr_underflow_o = csr_underflow;
	palette_colour_wen = __palette_wen;
	palette_colour_o = palette_colour_wdata;
	palette_addr_wen = __palette_wen;
	palette_addr_o = palette_addr_wdata;
end

always @ (posedge clk or negedge rst_n) begin
	if (!rst_n) begin
		csr_en_o <= 1'h0;
		csr_virq <= 1'h0;
		csr_virqe_o <= 1'h0;
		csr_virq_pauses_dma_o <= 1'h0;
		csr_underflow <= 1'h0;
		csr_log_pix_repeat_o <= 2'h0;
		framebuf_o <= 28'h0;
	end else begin
		if (__csr_wen)
			csr_en_o <= csr_en_wdata;
		csr_virq <= (csr_virq && !(__csr_wen && csr_virq_wdata)) || csr_virq_i;
		if (__csr_wen)
			csr_virqe_o <= csr_virqe_wdata;
		if (__csr_wen)
			csr_virq_pauses_dma_o <= csr_virq_pauses_dma_wdata;
		csr_underflow <= (csr_underflow && !(__csr_wen && csr_underflow_wdata)) || csr_underflow_i;
		if (__csr_wen)
			csr_log_pix_repeat_o <= csr_log_pix_repeat_wdata;
		if (__framebuf_wen)
			framebuf_o <= framebuf_wdata;
	end
end

endmodule
